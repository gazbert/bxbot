###############################################################################
#
# BX-bot's Spring Boot application config.
# BX-bot \u7684 Spring Boot \u5E94\u7528\u7A0B\u5E8F\u914D\u7F6E\u3002
#
###############################################################################

# The Spring Boot management port.
# Setting it to -1 disables management endpoints over HTTP(S).
# Locked down to prevent remote access.
# Spring Boot \u7BA1\u7406\u7AEF\u53E3\u3002
# \u5C06\u5176\u8BBE\u7F6E\u4E3A -1 \u5C06\u7981\u7528\u901A\u8FC7 HTTP(S) \u7684\u7BA1\u7406\u7AEF\u70B9\u3002
# \u9501\u5B9A\u4EE5\u9632\u6B62\u8FDC\u7A0B\u8BBF\u95EE\u3002
management.port=-1

# The Spring Boot management address.
# Locked down to prevent remote access - it only allows access from the local machine if the
# management.port were to be changed.
# Spring Boot \u7BA1\u7406\u5730\u5740\u3002
# \u9501\u5B9A\u4EE5\u9632\u6B62\u8FDC\u7A0B\u8BBF\u95EE - \u5B83\u53EA\u5141\u8BB8\u4ECE\u672C\u5730\u673A\u5668\u8BBF\u95EE\uFF0C\u5982\u679C
# management.port \u5C06\u88AB\u66F4\u6539\u3002
management.address=127.0.0.1

# Location of BX-bot log4j2 config file.
# Spring Boot seems to need this to initialise logging successfully.
# BX-bot log4j2 \u914D\u7F6E\u6587\u4EF6\u7684\u4F4D\u7F6E\u3002
# Spring Boot \u4F3C\u4E4E\u9700\u8981\u8FD9\u4E2A\u6765\u6210\u529F\u521D\u59CB\u5316\u65E5\u5FD7\u8BB0\u5F55\u3002
logging.config=./config/log4j2.xml

# Enable JMX - it is needed expose the Spring Cloud RestartEndpoint since Boot 2.2.x :-/
# See: https://github.com/spring-cloud/spring-cloud-commons/issues/710
# \u542F\u7528 JMX - \u4ECE Boot 2.2.x \u5F00\u59CB\u9700\u8981\u516C\u5F00 Spring Cloud RestartEndpoint :-/
# \u89C1\uFF1Ahttps://github.com/spring-cloud/spring-cloud-commons/issues/710
spring.jmx.enabled=true

###############################################################################
# REST API configuration
# REST API \u914D\u7F6E
###############################################################################

# Swagger config
# \u62DB\u6447\u914D\u7F6E
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.tagsSorter=alpha

# Used for signing JWTs
# \u7528\u4E8E\u7B7E\u7F72 JWT
bxbot.restapi.jwt.secret=ChangeMeAndKeepMeSecret!
# Token expires time (in secs)
# \u4EE4\u724C\u8FC7\u671F\u65F6\u95F4\uFF08\u4EE5\u79D2\u4E3A\u5355\u4F4D\uFF09
bxbot.restapi.jwt.expiration=600
# Max allowed clock skew (in secs) when comparing token expiry time
# \u6BD4\u8F83\u4EE4\u724C\u5230\u671F\u65F6\u95F4\u65F6\u5141\u8BB8\u7684\u6700\u5927\u65F6\u949F\u504F\u5DEE\uFF08\u4EE5\u79D2\u4E3A\u5355\u4F4D\uFF09
bxbot.restapi.jwt.allowed_clock_skew=60
bxbot.restapi.jwt.issuer=bxbot
bxbot.restapi.jwt.audience=bxbot-ui

# CORS allowed origins. This MUST be locked down to specific host in Production, e.g.
# https://some-host:3000
# For dev environment, we allow any origin.
#CORS \u5141\u8BB8\u7684\u6765\u6E90\u3002 \u8FD9\u5FC5\u987B\u9501\u5B9A\u5230\u751F\u4EA7\u4E2D\u7684\u7279\u5B9A\u4E3B\u673A\uFF0C\u4F8B\u5982
# https://some-host:3000
# \u5BF9\u4E8E\u5F00\u53D1\u73AF\u5883\uFF0C\u6211\u4EEC\u5141\u8BB8\u4EFB\u4F55\u6765\u6E90\u3002
restapi.cors.allowed_origin=*

# Spring Actuator endpoints that are used by REST API.
# REST API \u4F7F\u7528\u7684 Spring Actuator \u7AEF\u70B9\u3002
management.endpoints.enabled-by-default=false
management.endpoint.restart.enabled=true
management.endpoint.health.enabled=true
management.endpoint.logfile.enabled=true

# We don't expose actuator endpoints directly - they can only be called via the REST API.
# \u6211\u4EEC\u4E0D\u76F4\u63A5\u516C\u5F00\u6267\u884C\u5668\u7AEF\u70B9\u2014\u2014\u5B83\u4EEC\u53EA\u80FD\u901A\u8FC7 REST API \u8C03\u7528\u3002
management.endpoints.web.exposure.exclude=*

# Lock down management security - we don't expose the management endpoints.
# \u9501\u5B9A\u7BA1\u7406\u5B89\u5168\u2014\u2014\u6211\u4EEC\u4E0D\u66B4\u9732\u7BA1\u7406\u7AEF\u70B9\u3002
management.security.enabled=true

# Must be set to location of logfile for management.endpoint.logfile to work.
# See: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints
# See: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging.file-output
# \u5FC5\u987B\u8BBE\u7F6E\u4E3A logfile \u7684\u4F4D\u7F6E\uFF0C management.endpoint.logfile \u624D\u80FD\u5DE5\u4F5C\u3002
# \u89C1\uFF1Ahttps://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints
# \u89C1\uFF1Ahttps://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging.file-output
logging.file.name=./logs/bxbot.log

# Max number of lines from the logfile to be returned by the REST API /runtime/logfile endpoint.
# If the number of lines in the logfile exceeds this limit, the file content will truncated.
# REST API /runtime/logfile \u7AEF\u70B9\u8FD4\u56DE\u7684\u65E5\u5FD7\u6587\u4EF6\u7684\u6700\u5927\u884C\u6570\u3002
# \u5982\u679C\u65E5\u5FD7\u6587\u4EF6\u7684\u884C\u6570\u8D85\u8FC7\u8FD9\u4E2A\u9650\u5236\uFF0C\u6587\u4EF6\u5185\u5BB9\u5C06\u88AB\u622A\u65AD\u3002
bxbot.restapi.maxLogfileLines=1000

# Max size (in bytes) of logfile to be downloaded from the REST API /runtime/logfile/download endpoint.
# If the size of the logfile exceeds this limit, the end of the file will be truncated before download.
# \u8981\u4ECE REST API /runtime/logfile/download \u7AEF\u70B9\u4E0B\u8F7D\u7684\u65E5\u5FD7\u6587\u4EF6\u7684\u6700\u5927\u5927\u5C0F\uFF08\u4EE5\u5B57\u8282\u4E3A\u5355\u4F4D\uFF09\u3002
# \u5982\u679C\u65E5\u5FD7\u6587\u4EF6\u7684\u5927\u5C0F\u8D85\u8FC7\u8FD9\u4E2A\u9650\u5236\uFF0C\u6587\u4EF6\u7684\u7ED3\u5C3E\u4F1A\u5728\u4E0B\u8F7D\u524D\u88AB\u622A\u65AD\u3002
bxbot.restapi.maxLogfileDownloadSize=1048576

# H2 configuration. Really make sure it is off.
#H2 \u914D\u7F6E\u3002 \u786E\u5B9E\u786E\u4FDD\u5B83\u5DF2\u5173\u95ED\u3002
spring.h2.console.enabled=false

###############################################################################
# TLS Configuration (for securing REST API in Production)
# TLS \u914D\u7F6E\uFF08\u7528\u4E8E\u5728\u751F\u4EA7\u4E2D\u4FDD\u62A4 REST API\uFF09
###############################################################################

# The port the Spring Boot container will listen on for incoming HTTP requests.
# Defaults to 8080 if not set.
# Setting it to -1 disables the REST API.
# Should be set to 8443 when TLS enabled in Production environment.
# Spring Boot \u5BB9\u5668\u5C06\u4FA6\u542C\u4F20\u5165 HTTP \u8BF7\u6C42\u7684\u7AEF\u53E3\u3002
# \u5982\u679C\u672A\u8BBE\u7F6E\uFF0C\u5219\u9ED8\u8BA4\u4E3A 8080\u3002
# \u5C06\u5176\u8BBE\u7F6E\u4E3A -1 \u5C06\u7981\u7528 REST API\u3002
# \u5728\u751F\u4EA7\u73AF\u5883\u4E2D\u542F\u7528 TLS \u65F6\u5E94\u8BBE\u7F6E\u4E3A 8443\u3002
server.port=8080

# Spring Boot profile for REST API.
# Must use https profile in Production environment.
# REST API \u7684 Spring Boot \u914D\u7F6E\u6587\u4EF6\u3002
# \u5FC5\u987B\u5728\u751F\u4EA7\u73AF\u5883\u4E2D\u4F7F\u7528 https \u914D\u7F6E\u6587\u4EF6\u3002
spring.profiles.active=dev
#spring.profiles.active=https
#spring.profiles.active=https

# SSL (TLS) configuration to secure the REST API.
# Must be enabled in Production environment.
#security.require-ssl=true
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=secret
#server.ssl.key-store-type=PKCS12
# SSL (TLS) \u914D\u7F6E\u4EE5\u4FDD\u62A4 REST API\u3002
# \u5FC5\u987B\u5728\u751F\u4EA7\u73AF\u5883\u4E2D\u542F\u7528\u3002
#security.require-ssl=true
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=secret
#server.ssl.key-store-type=PKCS12
