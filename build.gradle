buildscript {

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath('io.spring.gradle:dependency-management-plugin:1.0.13.RELEASE')
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.7.2')
    }
}

plugins {
    id 'org.sonarqube' version '3.4.0.2513'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.9'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

ext.versions = [
        springBootVersion        : '2.7.2',
        springCloudVersion       : '3.1.3',

        // Should be same as dependency used by springBootVersion
        springCoreVersion        : '5.3.22',

        springdocOpenapiVersion  : '1.6.10',
        hibernateVaildatorVersion: '7.0.5.Final',
        jaxbVersion              : '2.3.1',
        javaxMailVersion         : '1.6.2',
        spotBugsVersion          : '4.7.1'
]

ext.libraries = [
        spring_boot_starter                     : dependencies.create("org.springframework.boot:spring-boot-starter:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_boot_starter_log4j2              : dependencies.create("org.springframework.boot:spring-boot-starter-log4j2:" + ext.versions.springBootVersion),
        spring_boot_starter_web                 : dependencies.create("org.springframework.boot:spring-boot-starter-web:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_boot_starter_data_jpa            : dependencies.create("org.springframework.boot:spring-boot-starter-data-jpa:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_boot_starter_data_rest           : dependencies.create("org.springframework.boot:spring-boot-starter-data-rest:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_boot_starter_actuator            : dependencies.create("org.springframework.boot:spring-boot-starter-actuator:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_boot_starter_security            : dependencies.create("org.springframework.boot:spring-boot-starter-security:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_cloud_starter                    : dependencies.create("org.springframework.cloud:spring-cloud-starter:" + ext.versions.springCloudVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_tx                               : dependencies.create("org.springframework:spring-tx:" + ext.versions.springCoreVersion),
        jjwt                                    : dependencies.create("io.jsonwebtoken:jjwt:0.9.1"),
        google_guava                            : dependencies.create("com.google.guava:guava:31.1-jre"),
        google_gson                             : dependencies.create("com.google.code.gson:gson:2.9.1"),
        h2                                      : dependencies.create("com.h2database:h2:2.1.214"),

        jakarta_mail_api                          : dependencies.create("jakarta.mail:jakarta.mail-api:2.1.1"),
        jakarta_mail_sun                          : dependencies.create("com.sun.mail:jakarta.mail:2.0.1"),

        javax_xml_api                           : dependencies.create("javax.xml.bind:jaxb-api:" + ext.versions.jaxbVersion),
        javax_xml_impl                          : dependencies.create("com.sun.xml.bind:jaxb-impl:" + ext.versions.jaxbVersion),
        snake_yaml                              : dependencies.create("org.yaml:snakeyaml:1.30"),

        springdoc_openapi_ui                    : dependencies.create("org.springdoc:springdoc-openapi-ui:" + ext.versions.springdocOpenapiVersion),
        springdoc_openapi_security              : dependencies.create("org.springdoc:springdoc-openapi-security:" + ext.versions.springdocOpenapiVersion),

        validation_api                          : dependencies.create("javax.validation:validation-api:2.0.1.Final"),
        hibernate_validator                     : dependencies.create("org.hibernate.validator:hibernate-validator:" + ext.versions.hibernateVaildatorVersion),
        hibernate_validator_annotation_processor: dependencies.create("org.hibernate.validator:hibernate-validator-annotation-processor:" + ext.versions.hibernateVaildatorVersion),

        powermock_junit                         : dependencies.create("org.powermock:powermock-module-junit4:2.0.9"),
        powermock_api_easymock                  : dependencies.create("org.powermock:powermock-api-easymock:2.0.9"),
        easymock                                : dependencies.create("org.easymock:easymock:4.3"),

        // JUnit 4 still as Powermock does not play with Junit 5: https://github.com/powermock/powermock/issues/929
        junit_vintage_engine                    : dependencies.create("org.junit.vintage:junit-vintage-engine:5.9.0"),

        spring_boot_starter_test                : dependencies.create("org.springframework.boot:spring-boot-starter-test:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
        },
        spring_security_test                    : dependencies.create("org.springframework.security:spring-security-test:5.7.3"),
        awaitility                              : dependencies.create("org.awaitility:awaitility:4.2.0")
]

allprojects {

    apply plugin: 'application'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'org.sonarqube'

    group = 'com.gazbert.bxbot'
    version = '1.7.1-SNAPSHOT'

    dependencyManagement {
        applyMavenExclusions = false
    }
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories {
        mavenCentral()
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    javadoc {
        include "**/api/**"
    }

    checkstyle {
        toolVersion '8.21'
        configFile = file("${rootDir}/etc/google_checks.xml")
        ignoreFailures = false
        showViolations = true
        maxErrors = 0
        maxWarnings = 0
    }
    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }

    jacoco {
        toolVersion = "0.8.7"
    }
    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.required = true
        }
    }
    test.finalizedBy jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification

    spotbugs {
        ignoreFailures = false
        excludeFilter = file("${rootDir}/etc/spotbugs-exclude-filter.xml")
        reportsDir = file("$project.buildDir/reports/spotbugs")
        effort = "max"
    }
    spotbugsMain {
        reports {
            html {
                required = true
            }
        }
    }
    tasks {
        spotbugsTest {
            onlyIf { false }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'gazbert-github'
        property 'sonar.projectKey', 'gazbert_bxbot'
    }
}

// TODO: Strip out common stuff into separate method?
task buildZipDist(type: Zip) {

    archiveBaseName = 'bxbot-app'
    archiveExtension = 'zip'

    into ("bxbot-app-$project.version") {

        into('libs') {
            from 'bxbot-app/build/libs'
            include "bxbot-app-${project.version}.jar" //copy the fat jar created by bootRepackage
        }

        into('') {
            from 'README.md'
        }

        into('') {
            from 'CONTRIBUTING.md'
        }

        into('') {
            from 'LICENSE'
        }

        into('') {
            from '3rd-party-licenses.md'
        }

        into('') {
            from 'bxbot.sh'
        }

        into('') {
            from 'bxbot.bat'
        }

        from('config/application.properties') {
            into 'config'
        }

        into('config') {
            from 'config'
            include('*.xml')
            include('*.yaml')
        }
    }
}

// TODO: Strip out common stuff into separate method?
task buildTarGzipDist(type: Tar) {

    archiveBaseName = 'bxbot-app'
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP

    into("bxbot-app-$project.version") {

        into('libs') {
            from 'bxbot-app/build/libs'
            include "bxbot-app-${project.version}.jar" //copy the fat jar created by bootRepackage
        }

        into('') {
            from 'README.md'
        }

        into('') {
            from 'CONTRIBUTING.md'
        }

        into('') {
            from 'LICENSE'
        }

        into('') {
            from '3rd-party-licenses.md'
        }

        into('') {
            from 'bxbot.sh'
        }

        into('') {
            from 'bxbot.bat'
        }

        from('config/application.properties') {
            into 'config'
        }

        into('config') {
            from 'config'
            include('*.xml')
            include('*.yaml')
        }
    }
}

